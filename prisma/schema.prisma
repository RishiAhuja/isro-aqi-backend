generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id            String            @id @default(cuid())
  name          String
  latitude      Float
  longitude     Float
  state         String?
  country       String            @default("India")
  stationType   String?
  stationCode   String?
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  aqiLogs       AQILog[]
  forecasts     Forecast[]
  notifications NotificationLog[]

  @@unique([latitude, longitude])
  @@map("locations")
}

model AQILog {
  id         String   @id @default(cuid())
  locationId String
  aqi        Int
  category   String
  pm25       Float?
  pm10       Float?
  no2        Float?
  so2        Float?
  co         Float?
  o3         Float?
  source     String
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now())
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([locationId, timestamp])
  @@index([timestamp])
  @@map("aqi_logs")
}

model Forecast {
  id           String   @id @default(cuid())
  locationId   String
  predictedAqi Int
  confidence   Float?
  forecastFor  DateTime
  hoursAhead   Int
  model        String
  createdAt    DateTime @default(now())
  location     Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([locationId, forecastFor])
  @@map("forecasts")
}

model NotificationLog {
  id         String   @id @default(cuid())
  locationId String
  fcmToken   String?
  userId     String?
  aqi        Int
  threshold  Int
  message    String
  sentAt     DateTime @default(now())
  status     String   @default("sent")
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([locationId, sentAt])
  @@map("notification_logs")
}

model Subscription {
  id         String   @id @default(cuid())
  fcmToken   String   @unique
  userId     String?
  locations  String[]
  thresholds Json
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("subscriptions")
}
